"use client";

import { useEffect, useState, useCallback, useMemo } from "react";
import { mixColors } from "@/utils/colorUtils";
import type { BlackoutByBuilding } from "@/types/Blackout";

/**
 * –¢–∏–ø —Å–æ–±—ã—Ç–∏–π –¥–ª—è emitter'–∞ –º–∞—Ä–∫–µ—Ä–æ–≤.
 */
type EmitterEvent = { type: "closeAll" } | { type: "closeExcept"; id: string };

/**
 * –ü—Ä–æ–ø—Å—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ BlackoutMarker.
 */
interface BlackoutMarkerProps {
  id: string;
  data: BlackoutByBuilding;
  Marker: React.ComponentType<any>;
  emitter: {
    subscribe: (fn: (e: EmitterEvent) => void) => () => void;
    publish: (e: EmitterEvent) => void;
  };
  recordInteraction: (id: string) => void;
}

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –º–∞—Ä–∫–µ—Ä–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π –Ω–∞ –∫–∞—Ä—Ç–µ.
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ü–≤–µ—Ç–Ω–æ–π –º–∞—Ä–∫–µ—Ä —Å popup'–æ–º, –≤ –∫–æ—Ç–æ—Ä–æ–º —É–∫–∞–∑–∞–Ω—ã —Ç–∏–ø—ã –∏ –æ–ø–∏—Å–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∏–π.
 */
export default function BlackoutMarker({
  id,
  data,
  Marker,
  emitter,
  recordInteraction,
}: BlackoutMarkerProps) {
  const [open, setOpen] = useState(false);

  /** –¶–≤–µ—Ç–∞ –ø–æ —Ç–∏–ø–∞–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–π */
  const colorByType: Record<string, string> = {
    electricity: "#f7a500",
    cold_water: "#0a12f5",
    hot_water: "#0a12f5",
    heat: "#c20000",
  };

  /** –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è popup'–∞ –ø–æ —Ç–∏–ø–∞–º */
  const typesText = new Map([
    ["electricity", "‚ö° –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–≤–µ—Ç–∞"],
    ["cold_water", "‚ùÑÔ∏èüíß –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ–¥—ã"],
    ["hot_water", "üî•üíß –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≥–æ—Ä—è—á–µ–π –≤–æ–¥—ã"],
    ["heat", "üî• –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–æ–ø–ª–µ–Ω–∏—è"],
  ]);

  /**
   * –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è popup'–∞:
   * - —Å–º–µ—à–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç –º–∞—Ä–∫–µ—Ä–∞
   * - —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π
   * - —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π
   */
  const { mixedColor, blackoutTypeElements, blackoutDescriptionElements } =
    useMemo(() => {
      // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –æ—Ç–∫–ª—é—á–µ–Ω–∏–π
      const uniqueTypes = Array.from(
        new Set(data.blackouts.map((b) => b.type))
      );

      // JSX –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –ø–æ —Ç–∏–ø–∞–º
      const blackoutTypeElements = uniqueTypes.map((type, index) => (
        <strong key={type}>{typesText.get(type)}</strong>
      ));

      // –°–º–µ—à–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤
      const mixedColor = uniqueTypes.reduce((acc, type, index) => {
        if (index === 0) return colorByType[type];
        return mixColors(acc, colorByType[type], 0.5);
      }, "");

      // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∏–π (—Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ)
      const uniqueDescriptions = Array.from(
        new Set(
          data.blackouts
            .map((b) => b.description)
            .filter((desc) => desc && desc.length > 0)
        )
      );

      // JSX –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏–π
      const blackoutDescriptionElements = uniqueDescriptions.map((desc, i) => (
        <span key={i}>{"‚Äî " + desc}</span>
      ));

      return { mixedColor, blackoutTypeElements, blackoutDescriptionElements };
    }, [data.blackouts]);

  /**
   * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è emitter'–∞.
   * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç popup, –µ—Å–ª–∏ –ø—Ä–∏—à–ª–æ —Å–æ–±—ã—Ç–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –∏–ª–∏ –≤—Å–µ—Ö, –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ.
   */
  useEffect(() => {
    const unsubscribe = emitter.subscribe((event) => {
      const shouldClose =
        event.type === "closeAll" ||
        (event.type === "closeExcept" && event.id !== id);

      if (shouldClose) setOpen(false);
    });

    return unsubscribe;
  }, [emitter, id]);

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –º–∞—Ä–∫–µ—Ä—É.
   * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç popup –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –¥—Ä—É–≥–∏–µ –º–∞—Ä–∫–µ—Ä—ã –∑–∞–∫—Ä—ã—Ç—å—Å—è.
   */
  const handleMarkerClick = useCallback(
    (e?: any) => {
      setOpen(true);
      emitter.publish({ type: "closeExcept", id });
      recordInteraction(id);
      e?.originalEvent?.stopPropagation?.(); // –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ –∫–ª–∏–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–µ
    },
    [emitter, id, recordInteraction]
  );

  /**
   * Popup-—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–∞—Ä–∫–µ—Ä–∞.
   */
  const popupContent = (
    <div
      style={{
        maxWidth: "75vw",
        padding: "6px 10px",
        background: "#fff",
        fontSize: 14,
        lineHeight: 1.4,
      }}
    >
      {blackoutTypeElements.map((el, i) => (
        <p key={`type-${i}`}>{el}</p>
      ))}
      {blackoutDescriptionElements.map((el, i) => (
        <p key={`desc-${i}`}>{el}</p>
      ))}
    </div>
  );

  /** –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∫–∞—Ä—Ç—ã (–≤ —Ñ–æ—Ä–º–∞—Ç–µ [–¥–æ–ª–≥–æ—Ç–∞, —à–∏—Ä–æ—Ç–∞]) */
  const coordinates = [
    parseFloat(data.coordinates[1]),
    parseFloat(data.coordinates[0]),
  ];

  return (
    <Marker
      onClick={handleMarkerClick}
      coordinates={coordinates}
      size={
        typeof window !== "undefined" && window.innerWidth > 768
          ? "micro"
          : "small"
      }
      color={{
        day: mixedColor,
        night: "#00ff00", // TODO: –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é —Ç–µ–º—É
      }}
      popup={{ show: open, content: () => popupContent }}
    />
  );
}
